// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Toko {
  id          String       @id @default(cuid())
  description String
  User        User[]
  StokBarang  StokBarang[]
  Penjualan   Penjualan[]
}

model Role {
  id          String     @id @default(cuid())
  description String
  User        User[]
  RoleMenu    RoleMenu[]
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  password     String
  RefreshToken RefreshToken[]
  role         Role           @relation(fields: [roleId], references: [id])
  roleId       String
  toko         Toko           @relation(fields: [tokoId], references: [id])
  tokoId       String
}

model RefreshToken {
  id           String   @id @default(cuid())
  refreshToken String   @unique
  expiredAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model RoleMenu {
  id     String @id @default(cuid())
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String
  menu   Menu   @relation(fields: [menuId], references: [id])
  menuId String
}

model Menu {
  id          String     @id @default(cuid())
  description String
  RoleMenu    RoleMenu[]
  SubMenu     SubMenu[]
}

model SubMenu {
  id          String @id @default(cuid())
  description String
  parent      Menu   @relation(fields: [parentId], references: [id])
  parentId    String
}

model StokBarang {
  id                        String                      @id @default(cuid())
  kode                      String
  nama                      String
  jumlah                    Int
  satuan                    String
  hargaModal                Int
  hargaJual                 Int
  createdBy                 String
  createdAt                 DateTime                    @default(now())
  updatedBy                 String?
  updatedAt                 DateTime?                   @default(now())
  toko                      Toko                        @relation(fields: [tokoId], references: [id])
  tokoId                    String
  BarangPo                  BarangPo[]
  BarangSuratJalanPo        BarangSuratJalanPo[]
  BarangPenjualan           BarangPenjualan[]
  BarangSuratJalanPenjualan BarangSuratJalanPenjualan[]
}

model Pt {
  id        String    @id @default(cuid())
  nama      String
  alamat    String
  telepon   String
  createdBy String
  createdAt DateTime  @default(now())
  updatedBy String?
  updatedAt DateTime? @default(now())
  Project   Project[]
  Po        Po[]
}

model Project {
  id        String    @id @default(cuid())
  nama      String
  createdBy String
  createdAt DateTime  @default(now())
  updatedBy String?
  updatedAt DateTime? @default(now())
  Pt        Pt        @relation(fields: [ptId], references: [id])
  ptId      String
  Po        Po[]
}

model Po {
  id                String          @id @default(cuid())
  noPo              String          @unique
  tanggal           DateTime
  tanggalJatuhTempo DateTime
  createdBy         String
  createdAt         DateTime        @default(now())
  updatedBy         String?
  updatedAt         DateTime?       @default(now())
  Pt                Pt              @relation(fields: [ptId], references: [id])
  ptId              String
  Project           Project         @relation(fields: [projectId], references: [id])
  projectId         String
  status            String
  SuratJalanPo      SuratJalanPo[]
  BarangPo          BarangPo[]
  InvoicePoList     InvoicePoList[]
}

model SuratJalanPo {
  id                 String               @id @default(cuid())
  nomor              String               @unique
  namaSupir          String
  tanggal            DateTime
  createdBy          String
  createdAt          DateTime             @default(now())
  updatedBy          String?
  updatedAt          DateTime?            @default(now())
  Po                 Po                   @relation(fields: [poId], references: [id], onDelete: Cascade)
  poId               String
  BarangSuratJalanPo BarangSuratJalanPo[]
}

model TandaTerimaNota {
  id                  String                @id @default(cuid())
  nomor               String
  tanggal             DateTime
  createdBy           String
  createdAt           DateTime              @default(now())
  updatedBy           String?
  updatedAt           DateTime?             @default(now())
  TandaTerimaNotaList TandaTerimaNotaList[]
}

model TandaTerimaNotaList {
  id                String          @id @default(cuid())
  TandaTerimaNota   TandaTerimaNota @relation(fields: [tandaTerimaNotaId], references: [id])
  tandaTerimaNotaId String
  InvoicePo         InvoicePo       @relation(fields: [invoicePoId], references: [id])
  invoicePoId       String
}

model InvoicePo {
  id                  String                @id @default(cuid())
  nomor               String
  createdBy           String
  createdAt           DateTime              @default(now())
  updatedBy           String?
  updatedAt           DateTime?             @default(now())
  TandaTerimaNotaList TandaTerimaNotaList[]
  InvoicePoList       InvoicePoList[]
}

model InvoicePoList {
  id          String    @id @default(cuid())
  InvoicePoId InvoicePo @relation(fields: [invoicePoId], references: [id])
  invoicePoId String
  Po          Po        @relation(fields: [poId], references: [id])
  poId        String
}

model BarangPo {
  id           String     @id @default(cuid())
  kode         String
  nama         String
  qty          Int
  satuan       String
  discount     Int
  harga        Int
  jumlahHarga  Int
  step         Int
  createdBy    String
  createdAt    DateTime   @default(now())
  updatedBy    String?
  updatedAt    DateTime?  @default(now())
  isMaster     Boolean
  po           Po         @relation(fields: [poId], references: [id])
  poId         String
  StokBarang   StokBarang @relation(fields: [stokBarangId], references: [id])
  stokBarangId String
}

model BarangSuratJalanPo {
  id             String       @id @default(cuid())
  kode           String
  nama           String
  qty            Int
  satuan         String
  createdBy      String
  createdAt      DateTime     @default(now())
  updatedBy      String?
  updatedAt      DateTime?    @default(now())
  suratJalanPo   SuratJalanPo @relation(fields: [suratJalanPoId], references: [id])
  suratJalanPoId String
  StokBarang     StokBarang   @relation(fields: [stokBarangId], references: [id])
  stokBarangId   String
}

model Penjualan {
  id                  String                @id @default(cuid())
  nomor               String
  namaPelanggan       String
  kontakPelanggan     String
  alamatPelanggan     String
  createdBy           String
  createdAt           DateTime              @default(now())
  updatedBy           String?
  updatedAt           DateTime?             @default(now())
  toko                Toko                  @relation(fields: [tokoId], references: [id])
  tokoId              String
  BarangPenjualan     BarangPenjualan[]
  SuratJalanPenjualan SuratJalanPenjualan[]
  Pembayaran          Pembayaran[]
  InvoicePenjualan    InvoicePenjualan[]
  PembayaranPenjualan PembayaranPenjualan[]
}

model PembayaranPenjualan {
  id              String    @id @default(cuid())
  Penjualan       Penjualan @relation(fields: [penjualanId], references: [id])
  penjualanId     String
  totalPembayaran Int
  jumlahBayar     Int
  metode          String
  isApprove       Boolean
  createdBy       String
  createdAt       DateTime  @default(now())
  approvedAt      DateTime?
  approvedBy      String?
  updatedBy       String?
  updatedAt       DateTime? @default(now())
}

model BarangPenjualan {
  id           String     @id @default(cuid())
  kode         String
  nama         String
  qty          Int
  satuan       String
  discount     Int
  harga        Int
  jumlahHarga  Int
  step         Int
  isMaster     Boolean
  createdBy    String
  createdAt    DateTime   @default(now())
  updatedBy    String?
  updatedAt    DateTime?  @default(now())
  penjualan    Penjualan  @relation(fields: [penjualanId], references: [id])
  penjualanId  String
  StokBarang   StokBarang @relation(fields: [stokBarangId], references: [id])
  stokBarangId String
}

model SuratJalanPenjualan {
  id                        String                      @id @default(cuid())
  nomor                     String
  namaSupir                 String
  createdBy                 String
  createdAt                 DateTime                    @default(now())
  updatedBy                 String?
  updatedAt                 DateTime?                   @default(now())
  penjualan                 Penjualan                   @relation(fields: [penjualanId], references: [id])
  penjualanId               String
  BarangSuratJalanPenjualan BarangSuratJalanPenjualan[]
}

model BarangSuratJalanPenjualan {
  id                    String              @id @default(cuid())
  kode                  String
  nama                  String
  qty                   Int
  satuan                String
  createdBy             String
  createdAt             DateTime            @default(now())
  updatedBy             String?
  updatedAt             DateTime?           @default(now())
  suratJalanPenjualan   SuratJalanPenjualan @relation(fields: [suratJalanPenjualanId], references: [id])
  suratJalanPenjualanId String
  StokBarang            StokBarang          @relation(fields: [stokBarangId], references: [id])
  stokBarangId          String
}

model Pembayaran {
  id          String    @id @default(cuid())
  jumlah      Int
  sisa        Int
  status      String
  isApprove   Boolean
  tanggal     DateTime
  penjualan   Penjualan @relation(fields: [penjualanId], references: [id])
  penjualanId String
}

model InvoicePenjualan {
  id          String    @id @default(cuid())
  nomor       String
  penjualan   Penjualan @relation(fields: [penjualanId], references: [id])
  penjualanId String
}
